#!/usr/bin/expect -f

# Purpose
# This script allows a script running as sudo on the master to log into a user's account on a given node,
# and execute the ansible-setup.sh script, in order to prepare the node for use with Ansible.

# Expect scripts generally spawn shells and then interact with them according to your script.
# From http://www.tcl.tk/man/expect5.31/
# -- Expect is a Tcl extension that lets you automate interactions with interactive programs such as Telnet and FTP clients. 

# This expect script cobbled together from several tutorials
# the most useful of which was:  http://www.admin-magazine.com/Articles/Automating-with-Expect-Scripts

# expect also has a macro recording type feature where you start autoexpect
# then do whatever you need to on the command line, and autoexpect records
# all of your keystrokes in addition to the communication between programs.
# then you can edit the file and replace hardcoded values with variable
# and use wildcards to essentially just listen for particular responses
# from the other program, and send back your response.

# see also:
# http://manpages.ubuntu.com/manpages/xenial/en/man1/expect.1.html
# http://www.tcl.tk/man/expect5.31/

#====================================================================================
# Comments from autoexpect:
#
# This Expect script was generated by autoexpect on Thu Oct  5 12:05:50 2017
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script was not run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don
#====================================================================================

# Note:  The following code could have been embedded directly in the ansible-setup.sh

set ansible_un		[lindex $argv 0]
set ansible_pwd			[lindex $argv 1]
set prog_user_selection 	[lindex $argv 2]
set ip_add_file			[lindex $argv 3]
set remote_ip 			[lindex $argv 4]
set prog_user	 		[lindex $argv 5]
set prog_user_pwd 		[lindex $argv 6]
set expect_timeout		[lindex $argv 7]
set show_except_script_msg	[lindex $argv 8]

# set timeout -1 # infinite wait, could hang
# The default is 10 seconds, which is too short for this script.
set timeout $expect_timeout

spawn ssh $prog_user@$remote_ip
# give the ssh a few seconds to start
sleep 5 

expect {
	timeout {puts "expect-script.sh timed out at:  expect \"*password: \" #1"; exit}	
	 "*password: "
}
send "$prog_user_pwd\r"

expect {
	timeout {puts "expect-script.sh timed out at:  expect \"$ \" #1"; exit}	
	"$ "
}
send "sudo ./ansible-setup.sh $ansible_un $ansible_pwd $prog_user_selection $ip_add_file $show_except_script_msg | tee $remote_ip.log\r"

expect {
	timeout {puts "expect-script.sh timed out at:  expect \"*password: \" #2"; exit}	
	 "*password*: "
}
send "$prog_user_pwd\r"

expect {
	timeout {puts "expect-script.sh timed out at:  expect \"$ \" #2"; exit}	
	"$ "
}
send "exit\r"
