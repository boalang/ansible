---
# This playbook will check for the necessary hadoop files and download them if missing.
# It will also test that the checsums match.

########################################################################################
# start playbook
########################################################################################

- name: Compressed file setup for Hadoop {{ hadoop_version }}
  hosts: head
  remote_user: ansible
  become_user: root
  become: true
  become_method: sudo 
  connection: ssh
  gather_facts: no

  vars_files:
    - ../local_variable_files/hadoop-vars.yml


########################################################################################
# start tasks
########################################################################################

  tasks:
  - name: create {{ hadoop_compressed }}, if it does not exist
    file:
      path: "{{ hadoop_compressed }}"
      state: directory
      mode: 0755
      recurse: yes
    
 
  - name: Test if "{{ hadoop_compressed }}/{{ hadoop_file }}" already exists.
    stat:
      path: "{{ hadoop_compressed }}/{{ hadoop_file }}"
    register: hd_file


  - name: Test if "{{ hadoop_compressed }}/{{ hadoop_file_checksum_mds }}" already exists.
    stat:
      path: "{{ hadoop_compressed }}/{{ hadoop_file_checksum_mds }}"
    register: hd_file_mds


  - name: Get checksum file for {{ hadoop_file_checksum_mds }}, when {{ hadoop_file_checksum_mds }} does not exist.
    get_url:
      url:  "https://archive.apache.org/dist/hadoop/common/hadoop-{{ hadoop_version }}/{{ hadoop_file_checksum_mds }}"
      dest: "{{ hadoop_compressed }}/{{ hadoop_file_checksum_mds }}"
    when:  hd_file_mds.stat.exists == False


# for hadoop 2.2.0 - 2.7.4, the checksum values for all algorithm types begin at column 31
# for hadoop 2.8.0 - 3.0.0-alpha/beta, the checksum values for all algorithm types begina at column 10
#
# use SHA1 because it is the only algorithm guaranteed to run on all version of Ansible and python
  - name: Get checksum value for {{ hadoop_file_checksum_mds }}
    shell: "grep --ignore-case 'SHA1' {{ hadoop_compressed }}/{{ hadoop_file_checksum_mds }} | cut -c31-"
    register: checksum_sha1
#    when: "{{ hadoop_version_numeric | int }} >= 220 and {{ hadoop_version_numeric | int }} <= 274"

#  - debug: var=checksum_sha1

# the variable checksum_sha1.msg will now look like "2677 48F6 1C9E 27C3 E189  5453 863B 4354 5825 5939"
# so remove the spaces to make "267748F61C9E27C3E1895453863B435458255939"
  - name:  Prepared {{ checksum_sha1.msg }} for comparion
    debug:
      msg: "{{ checksum_sha1.stdout_lines | replace(' ','') }}"
    register: checksum_sha1
#    when: "{{ hadoop_version_numeric | int }} >= 220 and {{ hadoop_version_numeric | int }} <= 274"

#  - debug: var=checksum_sha1

# note:  if the file needs to be downloaded, Ansible will compare the files checksum value with the 
# the checksum provided in the "checksum:" line below.
  - name: Download {{ hadoop_file }} into {{ hadoop_compressed }}, when {{ hadoop_file }} does not exist.
    get_url:
      url:  "https://archive.apache.org/dist/hadoop/common/hadoop-{{ hadoop_version }}/{{ hadoop_file }}"
      dest: "{{ hadoop_compressed }}/{{ hadoop_file }}"
      checksum: sha1:{{ checksum_sha1.msg[0] }}
    register: downloaded_checksum_result
    when:  hd_file.stat.exists == False

# if this runs, then the checksum for the downloaded file was okay, but there is little output for the user, so give a message
# if the checksums did not match, the playbook will fail / halt immediately
  - debug: 
      msg: "checksums match:  {{ hadoop_file }} = {{ downloaded_checksum_result['checksum_src']|upper }}; {{ hadoop_file_checksum_mds }} = {{ checksum_sha1['msg']|upper }}"
    when: downloaded_checksum_result['changed'] == True

  - name: Ensure {{ hadoop_compressed }} files are 0644
    command: find {{ hadoop_compressed }} -type f -exec chmod 0644 {} \;


#  - debug: var=checksum_sha1

# If the hadoop tar file was not downloaded, then no checksum has been calculated on it.
# So, calculate the checksum for the hadoop tar file, if it already existed in the directory.
  - name: Compute checksums for {{ hadoop_file }} if it already existed.
    stat:
      path: "{{ hadoop_compressed }}/{{ hadoop_file }}"
      checksum_algorithm: sha1
    register: hd_file_checksum
    when: hd_file.stat.exists == True

#  - debug: var=hd_file_checksum.stat.checksum
#  - debug: var=checksum_sha1.msg


# note:  the following uppercase changes only need to be run when the hadoop tar file already existed, not when downloaded.
#
# The output of sha1 is a large number, represented in base 16 for convenience, and by convention f equals F, e equals E, etc...
# https://stackoverflow.com/questions/11892053/is-sha-256-case-insensitive
#
# The checksums in the hadoop mds file are all capitals, but the checksum calculated by Ansible
# are lowercase, and Ansible will say that f does not equal F and throw an error below.
# 
# I believe this is because Ansible does not know the values are checksums, just strings.
# The same checksum value is used to test checksums for a downloaded file (above), but in that situation
# Ansible knows that the values are checksums.
  - name:  toupper( checksum_sha1.msg )
    debug:
      msg: "{{ checksum_sha1.msg | upper }}"
    register: checksum_sha1
    when: hd_file.stat.exists == True  


  - name:   toupper( hd_file_checksum.stat.checksum )
    debug:
      msg: "{{ hd_file_checksum.stat.checksum | upper }}"
    register: hd_file_checksum
    when: hd_file.stat.exists == True

  - debug: 
      var: checksum_sha1['msg'][0]
    when: hd_file.stat.exists == True
  - debug: 
      var: hd_file_checksum['msg']
    when: hd_file.stat.exists == True


# indicate successful match, if file already existed
  - debug:
      msg: "checksums match:  {{ hadoop_file }} = {{ hd_file_checksum['msg'] }}; {{ hadoop_file_checksum_mds }} = {{ checksum_sha1['msg'][0] }}"
    when: 
      - hd_file.stat.exists == True 
      - hd_file_checksum['msg'] == checksum_sha1['msg'][0]

# indicate failure of match, if file already existed
  - fail:
      msg: "checksums do not match:  {{ hadoop_file }} = {{ hd_file_checksum['msg'] }};  {{ hadoop_file_checksum_mds }} = {{ checksum_sha1['msg'][0] }}"
    when: 
      - hd_file.stat.exists == True
      - hd_file_checksum['msg'] != checksum_sha1['msg'][0]

